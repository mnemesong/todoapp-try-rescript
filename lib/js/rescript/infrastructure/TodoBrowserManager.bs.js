// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function readFormVal(param) {
  try {
    var result = (function() {
                const v = document.getElementById("formInput").value;
                if(typeof v !== "string") {
                    throw new Error("unknown type of formInput");
                }
                return v;
            });
    console.log(Curry._1(result, undefined));
    return {
            TAG: /* Ok */0,
            _0: Curry._1(result, undefined)
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var msg = obj._1.message;
      return {
              TAG: /* Error */1,
              _0: msg !== undefined ? msg : ""
            };
    }
    throw obj;
  }
}

function renderClearForm(param) {
  try {
    var result = (function() {
                const formContainer = document.getElementById("formContainer")
                if(!formContainer) {
                    throw new Error("Can not find formContainer")
                }
                formContainer.innerHTML = "<div>"
                    + "<input type='text' id='formInput'>"
                    + "<button type='button' id='formBtn'>Submit</button>"
                    + "</div>"
            });
    return {
            TAG: /* Ok */0,
            _0: Curry._1(result, undefined)
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var msg = obj._1.message;
      return {
              TAG: /* Error */1,
              _0: msg !== undefined ? msg : ""
            };
    }
    throw obj;
  }
}

function renderResponsibles(resps) {
  try {
    var result = (function(resps) {
                    // renderTask :: Task -> string
                    const renderTask = (task) => "<li id='task_" + task.id +"'>"
                        + (task.isReady ? "<b>" : "")
                        + task.name
                        + (task.isReady ? "</b>" : "")
                        + "</li>";
                    //renderResp :: Responsible -> string
                    const renderResp = (resp) => "<div>"
                        + "<span>" + resp.name + "</span>"
                        + "<ul>" + resp.tasks.map(t => renderTask(t)).join("") + "</ul>"
                        + "</div>";
                    const respsHtml = resps.map(r => renderResp(r)).join("");
                    const respsContainer = document.getElementById("respsContainer");
                    if(!respsContainer) {
                        throw new Error("Can not find respsContainer");
                    }
                    respsContainer.innerHTML = respsHtml;
                });
    return {
            TAG: /* Ok */0,
            _0: result(resps)
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var msg = obj._1.message;
      return {
              TAG: /* Error */1,
              _0: msg !== undefined ? msg : ""
            };
    }
    throw obj;
  }
}

function setFormOnApplyAction(appForm) {
  try {
    var result = (function(appFormFun) {
                    const formBtn = document.getElementById("formBtn");
                    if(!formBtn) {
                        throw new Error("unknown type of formBtn");
                    }
                    formBtn.onclick = appFormFun;
                });
    return {
            TAG: /* Ok */0,
            _0: result(appForm)
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var msg = obj._1.message;
      return {
              TAG: /* Error */1,
              _0: msg !== undefined ? msg : ""
            };
    }
    throw obj;
  }
}

function setTaskOnClickAction(taskId, changeTaskFun) {
  try {
    var result = (function(taskId, changeTaskFun) {
                    const curTask = document.getElementById('task_' + taskId);
                    curTask.onclick = () => changeTaskFun(taskId);
                });
    return {
            TAG: /* Ok */0,
            _0: result(taskId, changeTaskFun)
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      var msg = obj._1.message;
      return {
              TAG: /* Error */1,
              _0: msg !== undefined ? msg : ""
            };
    }
    throw obj;
  }
}

var TodoBrowserManager = {
  readFormVal: readFormVal,
  renderClearForm: renderClearForm,
  renderResponsibles: renderResponsibles,
  setFormOnApplyAction: setFormOnApplyAction,
  setTaskOnClickAction: setTaskOnClickAction
};

exports.TodoBrowserManager = TodoBrowserManager;
/* No side effect */
