// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var TodoTask = require("./TodoTask.bs.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var ResultMonad = require("../protocols/ResultMonad.bs.js");
var TodoResponsible = require("./TodoResponsible.bs.js");

function collectTasks(acc, el) {
  return Belt_Array.concat(acc, el.tasks);
}

function collectTasksFromRespsArray(state) {
  return Belt_Array.reduce(state, [], collectTasks);
}

function collectManyErrorMsgs(results) {
  return Js_string.concatMany(Belt_Array.map(results, (function (tr) {
                    if (tr.TAG === /* Ok */0) {
                      return "";
                    } else {
                      return tr._0;
                    }
                  })), "");
}

function summaryErrorMsgsToResut(errorMsg) {
  if (errorMsg.length > 0) {
    return {
            TAG: /* Error */1,
            _0: "SetTaskErrors: " + errorMsg
          };
  } else {
    return {
            TAG: /* Ok */0,
            _0: undefined
          };
  }
}

var TodoServicePrivate = {
  collectTasks: collectTasks,
  collectTasksFromRespsArray: collectTasksFromRespsArray,
  collectManyErrorMsgs: collectManyErrorMsgs,
  summaryErrorMsgsToResut: summaryErrorMsgsToResut
};

function TodoService(TBM, TSM) {
  var rerenderClearForm = function (applyForm) {
    var result = Belt_Result.flatMap(Curry._1(TBM.renderClearForm, undefined), (function (param) {
            return Curry._1(TBM.setFormOnApplyAction, applyForm);
          }));
    if (result.TAG === /* Ok */0) {
      return ;
    }
    console.log("Error:", result._0);
  };
  var rerenderResponsibles = function (changeTaskFun) {
    var result = Belt_Result.flatMap(Belt_Result.map(Belt_Result.flatMap(Belt_Result.flatMap(Curry._1(TSM.readResponsiblesState, undefined), (function (state) {
                        return Curry._1(TBM.renderResponsibles, state);
                      })), (function (param) {
                    return Curry._1(TSM.readResponsiblesState, undefined);
                  })), collectTasksFromRespsArray), (function (tasks) {
            return summaryErrorMsgsToResut(collectManyErrorMsgs(Belt_Array.map(tasks, (function (t) {
                                  return Curry._2(TBM.setTaskOnClickAction, t.id, changeTaskFun);
                                }))));
          }));
    if (result.TAG === /* Ok */0) {
      return ;
    }
    console.log(result._0);
  };
  var changeTask = function (taskId) {
    return Belt_Result.map(Belt_Result.flatMap(Belt_Result.map(Curry._1(TSM.readResponsiblesState, undefined), (function (resps) {
                          return Belt_Array.map(resps, (function (r) {
                                        return TodoResponsible.TodoResponsible.tryToSwitchChackedTask(r, taskId);
                                      }));
                        })), TSM.writeResponsiblesState), (function (param) {
                  rerenderResponsibles(changeTask);
                }));
  };
  var applyForm = function (param) {
    return Belt_Result.map(Belt_Result.map(Belt_Result.flatMap(Belt_Result.map(ResultMonad.ResultMonad.liftTuple([
                                Curry._1(TBM.readFormVal, undefined),
                                Curry._1(TSM.readResponsiblesState, undefined)
                              ]), (function (tuple) {
                              var formVal = tuple[0];
                              return Belt_Array.map(tuple[1], (function (r) {
                                            return TodoResponsible.TodoResponsible.addTask(r, TodoTask.TodoTask.$$new(formVal));
                                          }));
                            })), TSM.writeResponsiblesState), (function (param) {
                      rerenderClearForm(applyForm);
                    })), (function (param) {
                  rerenderResponsibles(changeTask);
                }));
  };
  var changeChecked = function (taskId) {
    return Belt_Result.flatMap(Curry._1(TSM.readResponsiblesState, undefined), (function (rs) {
                  return Curry._1(TSM.writeResponsiblesState, Belt_Array.map(rs, (function (r) {
                                    return TodoResponsible.TodoResponsible.tryToSwitchChackedTask(r, taskId);
                                  })));
                }));
  };
  return {
          rerenderClearForm: rerenderClearForm,
          rerenderResponsibles: rerenderResponsibles,
          changeTask: changeTask,
          applyForm: applyForm,
          changeChecked: changeChecked
        };
}

exports.TodoServicePrivate = TodoServicePrivate;
exports.TodoService = TodoService;
/* TodoTask Not a pure module */
